# A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

# Given a string s, return true if it is a palindrome, or false otherwise.

 

# Example 1:

# Input: s = "A man, a plan, a canal: Panama"
# Output: true
# Explanation: "amanaplanacanalpanama" is a palindrome.
# Example 2:

# Input: s = "race a car"
# Output: false
# Explanation: "raceacar" is not a palindrome.
# Example 3:

# Input: s = " "
# Output: true
# Explanation: s is an empty string "" after removing non-alphanumeric characters.
# Since an empty string reads the same forward and backward, it is a palindrome.

## Python:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s) - 1

        while l < r:
            while l < r and not self.alphaNum(s[l]):
                l += 1
            while r > l and not self.alphaNum(s[r]):
                r -= 1
            if s[l].lower() != s[r].lower():
                return False
            l, r = 1 + 1, r - 1
        return True

    def alphaNum(self, c):
        return (ord('A') <= ord(c) <=('Z') or
               (ord('a') <= ord(c) <=('z') or
               (ord('0') <= ord(c) <=('9'))


## Ruby:

def is_palindrome(s)
    l, r = 0, s.length - 1

    while l < r
        while l < r && !alpha_num(s[l])
            l += 1
        while r > l && !alpha_num(s[r])
            r -= 1
        if s[l].downcase != s[r].downcase
            return false
        end
        l += 1
        r -= 1
    end

    return true
end

def alpha_num(c)
    return ('A' <= c && c <= 'Z') ||
           ('a' <= c && c <= 'z') ||
           ('0' <= c && c <= '9')
end
